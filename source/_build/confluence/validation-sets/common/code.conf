<ac:structured-macro ac:name="info">
    <ac:rich-text-body>
        <p>This page is automatically generated.</p>
    </ac:rich-text-body>
</ac:structured-macro>

<p>The following contains a series of code examples using <a href="http://www.sphinx-doc.org/en/stable/markup/code.html">Sphinx’s code markup</a>. The first code block is an example of Python-styled code:</p>
<ac:structured-macro ac:name="code">
<ac:parameter ac:name="language">python</ac:parameter>
<ac:parameter ac:name="linenumbers">false</ac:parameter>
<ac:plain-text-body><![CDATA[def main():
    print 'Hello, world!'

if __name__ == '__main__':
    main()]]></ac:plain-text-body>
</ac:structured-macro>
<p>Code blocks do not have to be Python-specific, seen with this C-styled code
block:</p>
<ac:structured-macro ac:name="code">
<ac:parameter ac:name="language">cpp</ac:parameter>
<ac:parameter ac:name="linenumbers">false</ac:parameter>
<ac:plain-text-body><![CDATA[#include <stdio.h>

int main(void)
{
    printf("Hello, world!");
    return 0;
}]]></ac:plain-text-body>
</ac:structured-macro>
<p>Code blocks can optionally display line numbers (defined by Sphinx’s code
markup <code>:linenos:</code>):</p>
<ac:structured-macro ac:name="code">
<ac:parameter ac:name="language">cpp</ac:parameter>
<ac:parameter ac:name="linenumbers">true</ac:parameter>
<ac:plain-text-body><![CDATA[#include <iostream>

int main()
{
    std::cout << "Hello, world!";
    return 0;
}]]></ac:plain-text-body>
</ac:structured-macro>
<p>Presenting another code block which contains CDATA information (which should be
escaped to prevent publishing issues or display issues):</p>
<ac:structured-macro ac:name="code">
<ac:parameter ac:name="language">html/xml</ac:parameter>
<ac:parameter ac:name="linenumbers">false</ac:parameter>
<ac:plain-text-body><![CDATA[<html>
<header>
    <title>my-example</title>
    <script type="text/javascript">
    /* <![CDATA[ */
    alert('Hello, world!');
    /* ]]]]><![CDATA[> */
    </script>
</header>
<body>
    Hello, world!
</body>
</html>]]></ac:plain-text-body>
</ac:structured-macro>
<p>doctest entries should display a code markup styled in Python:</p>
<ac:structured-macro ac:name="code">
<ac:parameter ac:name="language">python</ac:parameter>
<ac:plain-text-body><![CDATA[>>> print "This is a doctest block."
This is a doctest block.]]></ac:plain-text-body>
</ac:structured-macro>
<p>Documentation may included <a href="http://docutils.sourceforge.net/docs/ref/rst/directives.html#parsed-literal-block">parsed literals</a>. While parsed literals cannot take
advantage of Confluence’s code macros, it is important that the content is
rendered with the document-defined inline markup:</p>
<div class="panel pdl">
<pre class="panelContent"><code>def main():
    <strong>print &apos;Hello, world!&apos;</strong>

if __name__ == &apos;__main__&apos;:
    main()</code>
</pre>
</div>

<ac:structured-macro ac:name="noformat">
    <ac:plain-text-body><![CDATA[Everything I ever wanted to say at the bottom of the page]]></ac:plain-text-body>
</ac:structured-macro>

